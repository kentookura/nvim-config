-- local theme = require("onedark.palette")
-- require("telescope").setup({
-- 	defaults = {
-- 		layout_strategy = "bottom_pane",
-- 		layout_config = {
-- 			height = 0.4,
-- 		},
-- 		border = false,
-- 		mappings = {
--
-- 			i = {
-- 				["<C-u>"] = false,
-- 				["<C-d>"] = false,
-- 			},
-- 		},
-- 	},
-- })
--
-- -- vim.api.nvim_set_hl(0, "TelescopeNormal", { fg = theme.dark.fg, bg = theme.dark.bg2 })
--
-- pcall(require("telescope").load_extension, "fzf")
--
-- vim.keymap.set("n", "<leader>?", require("telescope.builtin").oldfiles, { desc = "[?] Find recently opened files" })
-- vim.keymap.set("n", "<leader><space>", require("telescope.builtin").buffers, { desc = "[ ] Find existing buffers" })
-- vim.keymap.set("n", "<leader>/", function()
-- 	-- You can pass additional configuration to telescope to change theme, layout, etc.
-- 	require("telescope.builtin").current_buffer_fuzzy_find(require("telescope.themes").get_dropdown({
-- 		winblend = 10,
-- 		previewer = false,
-- 	}))
-- end, { desc = "[/] Fuzzily search in current buffer" })
--
-- local function telescope_live_grep_open_files()
-- 	require("telescope.builtin").live_grep({
-- 		grep_open_files = true,
-- 		prompt_title = "Live Grep in Open Files",
-- 	})
-- end
--
-- -- this will return a function that calls telescope.
-- -- cwd will default to lazyvim.util.get_root
-- -- for `files`, git_files or find_files will be chosen depending on .git
-- ---@param builtin string
-- ---@param opts? lazyvim.util.telescope.opts
-- local function telescope(builtin, opts)
-- 	local params = { builtin = builtin, opts = opts }
-- 	return function()
-- 		builtin = params.builtin
-- 		opts = params.opts
-- 		opts = vim.tbl_deep_extend("force", { cwd = Util.root() }, opts or {}) --[[@as lazyvim.util.telescope.opts]]
-- 		if builtin == "files" then
-- 			if vim.loop.fs_stat((opts.cwd or vim.loop.cwd()) .. "/.git") then
-- 				opts.show_untracked = true
-- 				builtin = "git_files"
-- 			else
-- 				builtin = "find_files"
-- 			end
-- 		end
-- 		if opts.cwd and opts.cwd ~= vim.loop.cwd() then
-- 			---@diagnostic disable-next-line: inject-field
-- 			opts.attach_mappings = function(_, map)
-- 				map("i", "<a-c>", function()
-- 					local action_state = require("telescope.actions.state")
-- 					local line = action_state.get_current_line()
-- 					telescope(
-- 						params.builtin,
-- 						vim.tbl_deep_extend("force", {}, params.opts or {}, { cwd = false, default_text = line })
-- 					)()
-- 				end)
-- 				return true
-- 			end
-- 		end
--
-- 		require("telescope.builtin")[builtin](opts)
-- 	end
-- end
--
-- vim.keymap.set("n", "<leader>s/", telescope_live_grep_open_files, { desc = "[S]earch [/] in Open Files" })
-- vim.keymap.set("n", "<leader>ss", require("telescope.builtin").builtin, { desc = "[S]earch [S]elect Telescope" })
-- vim.keymap.set("n", "<leader>gf", require("telescope.builtin").git_files, { desc = "Search [G]it [F]iles" })
-- vim.keymap.set("n", "<leader>sf", require("telescope.builtin").find_files, { desc = "[S]earch [F]iles" })
-- vim.keymap.set("n", "<leader>sh", require("telescope.builtin").help_tags, { desc = "[S]earch [H]elp" })
-- vim.keymap.set("n", "<leader>sw", require("telescope.builtin").grep_string, { desc = "[S]earch current [W]ord" })
-- vim.keymap.set("n", "<leader>sg", require("telescope.builtin").live_grep, { desc = "[S]earch by [G]rep" })
-- vim.keymap.set("n", "<leader>sG", ":LiveGrepGitRoot<cr>", { desc = "[S]earch by [G]rep on Git Root" })
-- vim.keymap.set("n", "<leader>sd", require("telescope.builtin").diagnostics, { desc = "[S]earch [D]iagnostics" })
-- vim.keymap.set("n", "<leader>sr", require("telescope.builtin").resume, { desc = "[S]earch [R]esume" })
--
-- -- vim: ts=2 sts=2 sw=2 et
